{"ast":null,"code":"var _jsxFileName = \"/Users/igorshkolnik/Desktop/tool/src/GameScreen.js\",\n  _s = $RefreshSig$();\n// Hauptkomponente, zuständig für den Spielablauf\nimport React, { useState, useEffect } from 'react';\nimport './GameScreen.css';\nimport ASCIIExpl from './ASCIIExplain';\nimport UnicodeExpl from './UnicodeExplain';\nimport TaskScroll from './TaskScroll';\nimport tasks from './Tasks';\nimport Modal from 'react-modal';\nimport FinalScreen from './FinalScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameScreen = ({\n  onGameCompletion\n}) => {\n  _s();\n  const levelBackgrounds = {\n    0: require('./pictures/tempel.jpeg'),\n    1: require('./pictures/tempel1.jpeg'),\n    2: require('./pictures/tempel2.jpeg'),\n    3: require('./pictures/tempel3.jpeg'),\n    4: require('./pictures/tempel4.jpeg'),\n    5: require('./pictures/tempel5.jpeg'),\n    6: require('./pictures/tempel6.jpeg'),\n    7: require('./pictures/tempel7.jpeg'),\n    8: require('./pictures/tempel8.jpeg'),\n    9: require('./pictures/tempel9.jpeg'),\n    10: require('./pictures/tempel10.jpeg')\n  };\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [solution, setSolution] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [scoreAnimation, setScoreAnimation] = useState(false);\n  const [backgroundImage, setBackgroundImage] = useState(\"\");\n  const [currentTaskIndex, setCurrentTaskIndex] = useState(0);\n  const [solvedTasks, setSolvedTasks] = useState(Array.from({\n    length: 10\n  }, () => []));\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const [asciiModalIsOpen, setAsciiModalIsOpen] = useState(false);\n  const [unicodeModalIsOpen, setUnicodeModalIsOpen] = useState(false);\n  const [isEvaluationInProgress, setEvaluationInProgress] = useState(false);\n  const [totalPoints, setTotalPoints] = useState(0);\n  const [showFinalScreen, setShowFinalScreen] = useState(false);\n  const levelAsNumber = parseInt(currentLevel, 10);\n\n  //Ist spiel beendet? Wenn ja mit punktzahl aufrufen, dann erscheint FinalScreen\n  const handleGameCompletion = score => {\n    onGameCompletion(score);\n  };\n\n  //Task-Bar\n  const handleTaskClick = index => {\n    setCurrentTaskIndex(index);\n  };\n\n  //Background initialisiereen\n\n  const initializeBackgroundImage = () => {\n    const initialBackgroundImage = levelBackgrounds[currentLevel];\n    document.body.style.backgroundImage = `url(${initialBackgroundImage})`;\n    document.body.style.backgroundSize = '100% 100%';\n    document.body.style.backgroundRepeat = 'no-repeat';\n    document.body.style.backgroundPosition = 'center center';\n  };\n  useEffect(() => {\n    initializeBackgroundImage();\n  }, []);\n  //Score Animation\n  useEffect(() => {\n    if (score !== 0) {\n      setScoreAnimation(true);\n      setTimeout(() => {\n        setScoreAnimation(false);\n      }, 1000);\n    }\n  }, [score]);\n\n  // überprüfe, ob alle Aufgaben richtig und wenn ja, beende spiel\n  useEffect(() => {\n    if (AllTasksSolved()) {\n      handleGameCompletion(score);\n    }\n  }, [solvedTasks]);\n  const levelSolved = level => {\n    return solvedTasks[level].length === tasks[level].length;\n  };\n\n  //ASCII-Erklärung\n\n  const AsciiModal = ({\n    isOpen,\n    closeModal\n  }) => /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onRequestClose: closeModal,\n    contentLabel: \"ASCII Erkl\\xE4rung\",\n    ariaHideApp: false,\n    style: {\n      content: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 'auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ASCIIExpl, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '-70px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ModalButton\",\n          onClick: closeModal,\n          children: \"Schlie\\xDFen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n\n  //Unicode-Erklärung\n  const UnicodeModal = ({\n    isOpen,\n    closeModal\n  }) => /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onRequestClose: closeModal,\n    contentLabel: \"Unicode Erkl\\xE4rung\",\n    ariaHideApp: false,\n    style: {\n      content: {\n        display: 'flex',\n        flexDirection: 'column-reverse',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 'auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(UnicodeExpl, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '-70px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ModalButton\",\n          onClick: closeModal,\n          children: \"Schlie\\xDFen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n  const openAsciiModal = () => setAsciiModalIsOpen(true);\n  const closeAsciiModal = () => setAsciiModalIsOpen(false);\n  const openUnicodeModal = () => setUnicodeModalIsOpen(true);\n  const closeUnicodeModal = () => setUnicodeModalIsOpen(false);\n  const findFirstUnsolvedTaskIndex = level => {\n    const tasksInLevel = tasks[level];\n    for (let index = 0; index < tasksInLevel.length; index++) {\n      if (!solvedTasks[level].includes(index)) {\n        return index;\n      }\n    }\n    return -1; // Falls alle Aufgaben gelöst wurden\n  };\n\n  // Level-Bar funktionalität\n  const handleLevelClick = level => {\n    setCurrentLevel(level);\n    const firstUnsolvedTaskIndex = findFirstUnsolvedTaskIndex(level);\n    if (firstUnsolvedTaskIndex !== -1) {\n      setCurrentTaskIndex(firstUnsolvedTaskIndex);\n      const body = document.querySelector('body');\n      body.style.backgroundImage = `url(${levelBackgrounds[level]})`;\n      setBackgroundImage(`url(${levelBackgrounds[level]})`);\n    } else {\n      setCurrentTaskIndex(0);\n      const body = document.querySelector('body');\n      body.style.backgroundImage = `url(${levelBackgrounds[level]})`;\n      setBackgroundImage(`url(${levelBackgrounds[level]})`);\n    }\n  };\n\n  //Auswertungsfunktion Input-Aufgaben\n  const handleSubmit = () => {\n    const num = 10 + levelAsNumber;\n    const currentTask = tasks[currentLevel][currentTaskIndex];\n    if (currentTask.type === 'input') {\n      if (!solvedTasks[currentLevel].includes(currentTaskIndex)) {\n        if (solution.trim() === currentTask.correctAnswer) {\n          setScore(prevScore => prevScore + 10 + levelAsNumber);\n          setMessage(`Richtig! Du hast ${num} Punkte für diese Antwort bekommen.`);\n          setSolvedTasks(prevSolvedTasks => {\n            const updatedSolvedTasks = [...prevSolvedTasks];\n            updatedSolvedTasks[currentLevel] = [...updatedSolvedTasks[currentLevel], currentTaskIndex];\n            if (AllTasksSolved()) {\n              handleGameCompletion(score);\n            }\n            return updatedSolvedTasks;\n          });\n          setCurrentTaskIndex(prevIndex => {\n            if (prevIndex < tasks[currentLevel].length - 1) {\n              return prevIndex + 1;\n            } else {\n              setCurrentLevel(prevLevel => prevLevel + 1);\n              return 0;\n            }\n          });\n        } else {\n          setMessage(\"Leider falsch. Schaue dir noch einmal die Erklärungen an.\");\n          setScore(prevScore => prevScore >= 1 ? prevScore - 1 : 0);\n        }\n      } else {\n        setMessage(\"Du hast diese Aufgabe bereits gelöst.\");\n      }\n    }\n    if (AllTasksSolved()) {\n      handleGameCompletion(score);\n    }\n    setSolution(\"\");\n  };\n\n  //überprüfen ob alle 30 Aufgaben gelöst sind\n  const AllTasksSolved = () => {\n    const totalTasks = tasks.flat().length;\n    const totalSolvedTasks = solvedTasks.flat().length;\n    return totalSolvedTasks === totalTasks;\n  };\n\n  //Auswertungsfunktion Multiple-Choice\n  const handleOptionClick = selectedOption => {\n    if (!isEvaluationInProgress) {\n      setEvaluationInProgress(true);\n      const num = 10 + levelAsNumber;\n      const optionElement = document.getElementById(selectedOption);\n      if (optionElement) {\n        optionElement.classList.add(\"glowing\");\n        if (!solvedTasks[currentLevel].includes(currentTaskIndex)) {\n          setTimeout(() => {\n            optionElement.classList.remove(\"glowing\");\n            if (selectedOption === tasks[currentLevel][currentTaskIndex].correctAnswer) {\n              setScore(prevScore => prevScore + 10 + levelAsNumber);\n              setMessage(`Richtig! Du hast ${num} Punkte für diese Antwort bekommen.`);\n              setCurrentTaskIndex(prevIndex => prevIndex + 1);\n              setSolvedTasks(prevSolvedTasks => {\n                const updatedSolvedTasks = [...prevSolvedTasks];\n                updatedSolvedTasks[currentLevel] = [...updatedSolvedTasks[currentLevel], currentTaskIndex];\n                if (AllTasksSolved()) {\n                  handleGameCompletion(score);\n                }\n                return updatedSolvedTasks;\n              });\n              if (currentTaskIndex + 1 === tasks[currentLevel].length) {\n                if (currentLevel < 9) {\n                  setCurrentLevel(prevLevel => prevLevel === \"0\" ? \"1\" : prevLevel + 1);\n                  setCurrentTaskIndex(0);\n                } else {\n                  setCurrentLevel(prevLevel => prevLevel);\n                  setCurrentTaskIndex(2);\n                }\n              }\n            } else {\n              setMessage(\"Leider falsch. Schaue dir noch einmal die Erklärungen an.\");\n              setScore(prevScore => Math.max(prevScore - levelAsNumber - 3, 0));\n            }\n            if (AllTasksSolved()) {\n              handleGameCompletion(score);\n            }\n            setSolution(\"\");\n            setEvaluationInProgress(false);\n          }, 2500);\n        } else {\n          optionElement.classList.remove(\"glowing\");\n          setMessage(\"Du hast diese Aufgabe bereits gelöst.\");\n          setEvaluationInProgress(false);\n          if (AllTasksSolved()) {\n            handleGameCompletion(score);\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"level-bar\",\n      children: Array.from({\n        length: 10\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `level-indicator ${index === currentLevel ? 'current-level' : ''} ${levelSolved(index) ? 'solved-level' : ''}`,\n        onClick: () => handleLevelClick(index),\n        children: index + 1\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"button\",\n        onClick: openAsciiModal,\n        children: \"ASCII Erkl\\xE4rung\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(AsciiModal, {\n        isOpen: asciiModalIsOpen,\n        closeModal: closeAsciiModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: openUnicodeModal,\n        children: \"Unicode Erkl\\xE4rung\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(UnicodeModal, {\n        isOpen: unicodeModalIsOpen,\n        closeModal: closeUnicodeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-progress\",\n        children: Array.from({\n          length: tasks[currentLevel].length\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `task-indicator ${index === currentTaskIndex ? 'current-task' : ''} ${solvedTasks[currentLevel].includes(index) ? 'solved-task' : ''}`,\n          onClick: () => handleTaskClick(index),\n          children: index + 1\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `score-container ${scoreAnimation ? 'score-animation' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"score-text\",\n          children: \"Punktestand:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"score-value\",\n          children: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-text\",\n        children: [/*#__PURE__*/_jsxDEV(TaskScroll, {\n          taskText: tasks[currentLevel][currentTaskIndex].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 9\n        }, this), tasks[currentLevel][currentTaskIndex].type === 'multipleChoice' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: Object.entries(tasks[currentLevel][currentTaskIndex].options).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            id: key,\n            className: \"option\",\n            onClick: () => handleOptionClick(key),\n            children: `${key}) ${value}`\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 7\n      }, this), tasks[currentLevel][currentTaskIndex].type === 'input' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"input-field\",\n          value: solution,\n          onChange: e => setSolution(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"buttonSubmit\",\n          onClick: handleSubmit,\n          children: \"Antwort best\\xE4tigen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 7\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-game\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-game-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => setMessage(\"\"),\n            children: \"Schlie\\xDFen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 1\n  }, this);\n};\n_s(GameScreen, \"UiEYVfeBTq4nE1bqMho78hkmFLI=\");\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["React","useState","useEffect","ASCIIExpl","UnicodeExpl","TaskScroll","tasks","Modal","FinalScreen","jsxDEV","_jsxDEV","GameScreen","onGameCompletion","_s","levelBackgrounds","require","currentLevel","setCurrentLevel","solution","setSolution","score","setScore","message","setMessage","scoreAnimation","setScoreAnimation","backgroundImage","setBackgroundImage","currentTaskIndex","setCurrentTaskIndex","solvedTasks","setSolvedTasks","Array","from","length","animationComplete","setAnimationComplete","asciiModalIsOpen","setAsciiModalIsOpen","unicodeModalIsOpen","setUnicodeModalIsOpen","isEvaluationInProgress","setEvaluationInProgress","totalPoints","setTotalPoints","showFinalScreen","setShowFinalScreen","levelAsNumber","parseInt","handleGameCompletion","handleTaskClick","index","initializeBackgroundImage","initialBackgroundImage","document","body","style","backgroundSize","backgroundRepeat","backgroundPosition","setTimeout","AllTasksSolved","levelSolved","level","AsciiModal","isOpen","closeModal","onRequestClose","contentLabel","ariaHideApp","content","display","flexDirection","alignItems","justifyContent","children","margin","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","className","onClick","UnicodeModal","openAsciiModal","closeAsciiModal","openUnicodeModal","closeUnicodeModal","findFirstUnsolvedTaskIndex","tasksInLevel","includes","handleLevelClick","firstUnsolvedTaskIndex","querySelector","handleSubmit","num","currentTask","type","trim","correctAnswer","prevScore","prevSolvedTasks","updatedSolvedTasks","prevIndex","prevLevel","totalTasks","flat","totalSolvedTasks","handleOptionClick","selectedOption","optionElement","getElementById","classList","add","remove","Math","max","_","taskText","question","Object","entries","options","map","key","value","id","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/igorshkolnik/Desktop/tool/src/GameScreen.js"],"sourcesContent":["// Hauptkomponente, zuständig für den Spielablauf\nimport React, { useState, useEffect } from 'react';\nimport './GameScreen.css';\nimport ASCIIExpl from './ASCIIExplain';\nimport UnicodeExpl from './UnicodeExplain';\nimport TaskScroll from './TaskScroll';\nimport tasks from './Tasks'; \nimport Modal from 'react-modal';\nimport FinalScreen from './FinalScreen';\n\nconst GameScreen = ({ onGameCompletion }) => {\n\n  const levelBackgrounds = {\n    0: require('./pictures/tempel.jpeg'),\n    1: require('./pictures/tempel1.jpeg'),\n    2: require('./pictures/tempel2.jpeg'),\n    3: require('./pictures/tempel3.jpeg'),\n    4: require('./pictures/tempel4.jpeg'),\n    5: require('./pictures/tempel5.jpeg'),\n    6: require('./pictures/tempel6.jpeg'),\n    7: require('./pictures/tempel7.jpeg'),\n    8: require('./pictures/tempel8.jpeg'),\n    9: require('./pictures/tempel9.jpeg'),\n    10: require('./pictures/tempel10.jpeg'),\n  };\n\n    const [currentLevel, setCurrentLevel] = useState(0);\n    const [solution, setSolution] = useState(\"\");\n    const [score, setScore] = useState(0);\n    const [message, setMessage] = useState(\"\");\n    const [scoreAnimation, setScoreAnimation] = useState(false);\n    const [backgroundImage, setBackgroundImage] = useState(\"\");\n    const [currentTaskIndex, setCurrentTaskIndex] = useState(0);\n    const [solvedTasks, setSolvedTasks] = useState(Array.from({ length: 10 }, () => []));\n    const [animationComplete, setAnimationComplete] = useState(false);\n    const [asciiModalIsOpen, setAsciiModalIsOpen] = useState(false);\n    const [unicodeModalIsOpen, setUnicodeModalIsOpen] = useState(false);\n    const [isEvaluationInProgress, setEvaluationInProgress] = useState(false);\n    const [totalPoints, setTotalPoints] = useState(0);\n    const [showFinalScreen, setShowFinalScreen] = useState(false);\n\n    \n    const levelAsNumber = parseInt(currentLevel, 10);\n\n    //Ist spiel beendet? Wenn ja mit punktzahl aufrufen, dann erscheint FinalScreen\n    const handleGameCompletion = (score) => {\n      onGameCompletion(score);\n    };\n\n    //Task-Bar\n    const handleTaskClick = (index) => {\n      setCurrentTaskIndex(index);\n    };\n\n //Background initialisiereen\n\n    const initializeBackgroundImage = () => {\n      const initialBackgroundImage = levelBackgrounds[currentLevel];\n      document.body.style.backgroundImage = `url(${initialBackgroundImage})`;\n      document.body.style.backgroundSize = '100% 100%';\n      document.body.style.backgroundRepeat = 'no-repeat';\n      document.body.style.backgroundPosition = 'center center';\n    };\n \n    useEffect(() => {\n      initializeBackgroundImage(); \n    }, []);\n//Score Animation\n      useEffect(() => {\n        if (score !== 0) {\n          setScoreAnimation(true);\n          setTimeout(() => {\n            setScoreAnimation(false);\n          }, 1000); \n        }\n      }, [score]);\n\n      // überprüfe, ob alle Aufgaben richtig und wenn ja, beende spiel\n      useEffect(() => {\n        if (AllTasksSolved()) {\n          handleGameCompletion(score);\n        }\n      }, [solvedTasks]);\n\n      const levelSolved = (level) => {\n        return solvedTasks[level].length === tasks[level].length;\n      };\n\n  \n\n  //ASCII-Erklärung\n\n      const AsciiModal = ({ isOpen, closeModal }) => (\n        <Modal\n          isOpen={isOpen}\n          onRequestClose={closeModal}\n          contentLabel=\"ASCII Erklärung\"\n          ariaHideApp={false}\n          style={{\n            content: {\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n            },\n          }}\n        >\n<div style={{ margin: 'auto', textAlign: 'center',}}>\n      <ASCIIExpl />\n      <div style={{ marginTop: '-70px' }}>\n        <button className=\"ModalButton\" onClick={closeModal}>\n          Schließen\n        </button>\n      </div>\n    </div>\n  </Modal>\n      );\n\n      //Unicode-Erklärung\n      const UnicodeModal = ({ isOpen, closeModal }) => (\n        <Modal\n          isOpen={isOpen}\n          onRequestClose={closeModal}\n          contentLabel=\"Unicode Erklärung\"\n          ariaHideApp={false}\n          style={{\n            content: {\n              display: 'flex',\n              flexDirection: 'column-reverse',\n              alignItems: 'center',\n              justifyContent: 'center',\n            },\n          }}\n        >\n<div style={{ margin: 'auto', textAlign: 'center',}}>\n      <UnicodeExpl />\n      <div style={{ marginTop: '-70px' }}>\n        <button className=\"ModalButton\" onClick={closeModal}>\n          Schließen\n        </button>\n      </div>\n    </div>\n  </Modal>\n      );\n\n      const openAsciiModal = () => setAsciiModalIsOpen(true);\n      const closeAsciiModal = () => setAsciiModalIsOpen(false);\n      const openUnicodeModal = () => setUnicodeModalIsOpen(true);\n      const closeUnicodeModal = () => setUnicodeModalIsOpen(false);\n\n\n      const findFirstUnsolvedTaskIndex = (level) => {\n        const tasksInLevel = tasks[level];\n        for (let index = 0; index < tasksInLevel.length; index++) {\n          if (!solvedTasks[level].includes(index)) {\n            return index;\n          }\n        }\n        return -1; // Falls alle Aufgaben gelöst wurden\n      };\n      \n\n\n// Level-Bar funktionalität\n      const handleLevelClick = (level) => {\n        setCurrentLevel(level);\n        const firstUnsolvedTaskIndex = findFirstUnsolvedTaskIndex(level);\n\n        if (firstUnsolvedTaskIndex !== -1) {\n        setCurrentTaskIndex(firstUnsolvedTaskIndex);\n        const body = document.querySelector('body');\n        body.style.backgroundImage = `url(${levelBackgrounds[level]})`;\n        setBackgroundImage(`url(${levelBackgrounds[level]})`);\n      } \n      else {\n      setCurrentTaskIndex(0);\n      const body = document.querySelector('body');\n      body.style.backgroundImage = `url(${levelBackgrounds[level]})`;\n      setBackgroundImage(`url(${levelBackgrounds[level]})`);\n      }\n      };\n\n//Auswertungsfunktion Input-Aufgaben\n      const handleSubmit = () => { \n        const num = 10 + levelAsNumber;\n        const currentTask = tasks[currentLevel][currentTaskIndex];\n        if (currentTask.type === 'input') {\n          if (!solvedTasks[currentLevel].includes(currentTaskIndex)) {\n            if (solution.trim() === currentTask.correctAnswer) {\n              setScore((prevScore) => prevScore + 10 + levelAsNumber);\n              setMessage(`Richtig! Du hast ${num} Punkte für diese Antwort bekommen.`);\n              setSolvedTasks((prevSolvedTasks) => {\n                const updatedSolvedTasks = [...prevSolvedTasks];\n                updatedSolvedTasks[currentLevel] = [...updatedSolvedTasks[currentLevel], currentTaskIndex];\n                if (AllTasksSolved()) {\n                  handleGameCompletion(score);\n                }\n                return updatedSolvedTasks;\n              });\n              setCurrentTaskIndex((prevIndex) => {\n                if (prevIndex < tasks[currentLevel].length - 1) {\n                  return prevIndex + 1;\n                } else {\n                  setCurrentLevel((prevLevel) => prevLevel + 1);\n                  return 0; \n                }\n              });\n            } else {\n              setMessage(\"Leider falsch. Schaue dir noch einmal die Erklärungen an.\");\n              setScore((prevScore) => (prevScore >= 1  ? prevScore - 1 : 0));\n            }\n          } else {\n            setMessage(\"Du hast diese Aufgabe bereits gelöst.\");\n          }\n        }\n        if (AllTasksSolved()) {\n          handleGameCompletion(score);\n        }\n        setSolution(\"\");\n      };\n    \n    //überprüfen ob alle 30 Aufgaben gelöst sind\n    const AllTasksSolved = () => {\n      const totalTasks = tasks.flat().length;\n      const totalSolvedTasks = solvedTasks.flat().length;\n      return totalSolvedTasks === totalTasks;\n    };\n\n//Auswertungsfunktion Multiple-Choice\n    const handleOptionClick = (selectedOption) => {\n      if (!isEvaluationInProgress) {\n        setEvaluationInProgress(true);\n        const num = 10 + levelAsNumber;\n      const optionElement = document.getElementById(selectedOption);\n      if (optionElement) {\n        optionElement.classList.add(\"glowing\");\n        if (!solvedTasks[currentLevel].includes(currentTaskIndex)) {\n        setTimeout(() => {\n          optionElement.classList.remove(\"glowing\");\n          if (selectedOption === tasks[currentLevel][currentTaskIndex].correctAnswer) {\n            setScore((prevScore) => prevScore + 10 + levelAsNumber);\n            setMessage(`Richtig! Du hast ${num} Punkte für diese Antwort bekommen.`);\n            setCurrentTaskIndex((prevIndex) => prevIndex + 1);\n            setSolvedTasks((prevSolvedTasks) => {\n              const updatedSolvedTasks = [...prevSolvedTasks];\n              updatedSolvedTasks[currentLevel] = [...updatedSolvedTasks[currentLevel], currentTaskIndex];\n              if (AllTasksSolved()) {\n                handleGameCompletion(score);\n              }\n              return updatedSolvedTasks;\n            });\n            if (currentTaskIndex + 1 === tasks[currentLevel].length) {\n              if (currentLevel < 9) {\n              setCurrentLevel((prevLevel) => (prevLevel === \"0\" ? \"1\" : prevLevel +1));\n              setCurrentTaskIndex(0);\n              }\n              else {\n                setCurrentLevel((prevLevel) => (prevLevel));\n                setCurrentTaskIndex(2);\n              }\n            }\n          } else {\n            setMessage(\"Leider falsch. Schaue dir noch einmal die Erklärungen an.\");\n            setScore((prevScore) => Math.max(prevScore - levelAsNumber - 3, 0));\n          }\n          if (AllTasksSolved()) {\n            handleGameCompletion(score);\n          }\n          setSolution(\"\");\n          setEvaluationInProgress(false);\n        }, 2500); \n      }\n      else {\n        optionElement.classList.remove(\"glowing\");\n        setMessage(\"Du hast diese Aufgabe bereits gelöst.\");\n        setEvaluationInProgress(false);\n        if (AllTasksSolved()) {\n          handleGameCompletion(score);\n        }\n        }\n      }\n    }\n    };\n\n\n      return (\n<div className=\"game-container\">\n  <div className=\"level-bar\">\n  {Array.from({ length: 10 }, (_, index) => (\n    <div\n      key={index}\n      className={`level-indicator ${index === currentLevel ? 'current-level' : ''} ${levelSolved(index) ? 'solved-level' : ''}`}\n      onClick={() => handleLevelClick(index)}\n    >\n      {index + 1}\n    </div>\n  ))}\n  </div>\n  <div className=\"button-container\">\n    <button type=\"button\" className=\"button\" onClick={openAsciiModal}>\n      ASCII Erklärung\n    </button>\n    <AsciiModal isOpen={asciiModalIsOpen} closeModal={closeAsciiModal} />\n    <button className=\"button\" onClick={openUnicodeModal}>\n      Unicode Erklärung\n    </button>\n    <UnicodeModal isOpen={unicodeModalIsOpen} closeModal={closeUnicodeModal} />\n  </div>\n  <div className=\"task-container\">\n    <div className=\"task-progress\">\n    {Array.from({ length: tasks[currentLevel].length }, (_, index) => (\n      <div\n        key={index}\n        className={`task-indicator ${index === currentTaskIndex ? 'current-task' : ''} ${solvedTasks[currentLevel].includes(index) ? 'solved-task' : ''}`}\n        onClick={() => handleTaskClick(index)}\n      >\n        {index + 1}\n      </div>\n    ))}\n    </div>\n    <div className={`score-container ${scoreAnimation ? 'score-animation' : ''}`}>\n      <span className=\"score-text\">Punktestand:</span>\n      <span className=\"score-value\">{score}</span>\n    </div>\n  </div>\n\n  <div className=\"task-container\">\n      <div className=\"task-text\">\n        <TaskScroll taskText={tasks[currentLevel][currentTaskIndex].question} />\n        {tasks[currentLevel][currentTaskIndex].type === 'multipleChoice' && (\n          <div className=\"options-container\">\n            {Object.entries(tasks[currentLevel][currentTaskIndex].options).map(([key, value]) => (\n              <div key={key} id={key} className=\"option\" onClick={() => handleOptionClick(key)}>\n                {`${key}) ${value}`}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    {tasks[currentLevel][currentTaskIndex].type === 'input' && (\n      <div>\n        <input\n          type=\"text\"\n          className=\"input-field\"\n          value={solution}\n          onChange={(e) => setSolution(e.target.value)}\n        />\n        <button className=\"buttonSubmit\" onClick={handleSubmit}>\n          Antwort bestätigen\n        </button>\n      </div>\n    )}\n          {message && (\n              <div className=\"popup-game\">\n                <div className=\"popup-game-content\">\n                  <h2>{message}</h2>\n                  <button className=\"button\" onClick={() => setMessage(\"\")}>Schließen</button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )\n          }    \n    \nexport default GameScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}