{"ast":null,"code":"var _jsxFileName = \"/Users/igorshkolnik/Desktop/tool/src/GameScreen.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './GameScreen.css';\nimport ASCIIExpl from './ASCIIExplain';\nimport UnicodeExpl from './UnicodeExplain';\nimport TaskScroll from './TaskScroll';\nimport tasks from './Tasks';\nimport Modal from 'react-modal';\nimport MyPdfViewer from './MyPdfViewer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameScreen() {\n  _s2();\n  var _s = $RefreshSig$();\n  const levelBackgrounds = {\n    0: require('./pictures/tempel.jpeg'),\n    1: require('./pictures/tempel1.jpeg'),\n    2: require('./pictures/tempel2.jpeg'),\n    3: require('./pictures/tempel3.jpeg'),\n    4: require('./pictures/tempel4.jpeg'),\n    5: require('./pictures/tempel5.jpeg'),\n    6: require('./pictures/tempel6.jpeg'),\n    7: require('./pictures/tempel7.jpeg'),\n    8: require('./pictures/tempel8.jpeg'),\n    9: require('./pictures/tempel9.jpeg'),\n    10: require('./pictures/tempel10.jpeg')\n  };\n  const [currentLevel, setCurrentLevel] = useState(\"0\");\n  const [solution, setSolution] = useState(\"\");\n  const [showAsciiPopup, setShowAsciiPopup] = useState(false);\n  const [showUnicodePopup, setShowUnicodePopup] = useState(false);\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [scoreAnimation, setScoreAnimation] = useState(false);\n  const [backgroundImage, setBackgroundImage] = useState(\"\");\n  const [currentTaskIndex, setCurrentTaskIndex] = useState(0);\n  const [solvedTasks, setSolvedTasks] = useState(Array.from({\n    length: 10\n  }, () => []));\n  const [showGame, setShowGame] = useState(false);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const [showMyPdfViewer, setShowMyPdfViewer] = useState(false);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const levelAsNumber = parseInt(currentLevel, 10);\n  const handleTaskClick = index => {\n    setCurrentTaskIndex(index);\n  };\n  const initializeBackgroundImage = () => {\n    const initialBackgroundImage = levelBackgrounds[currentLevel];\n    document.body.style.backgroundImage = `url(${initialBackgroundImage})`;\n    document.body.style.backgroundSize = '100% 100%';\n    document.body.style.backgroundRepeat = 'no-repeat';\n    document.body.style.backgroundPosition = 'center center';\n  };\n  useEffect(() => {\n    initializeBackgroundImage();\n  }, []);\n  const handleButtonClick = () => {\n    setShowMyPdfViewer(true);\n  };\n  useEffect(() => {\n    if (score !== 0) {\n      setScoreAnimation(true);\n      setTimeout(() => {\n        setScoreAnimation(false);\n      }, 1000);\n    }\n  }, [score]);\n  useEffect(() => {\n    const timeoutID = setTimeout(() => {\n      setShowGame(true);\n    }, 1000);\n    return () => clearTimeout(timeoutID);\n  }, []);\n  const openModal = () => {\n    setModalIsOpen(true);\n  };\n  const closeModal = () => {\n    setModalIsOpen(false);\n  };\n  const TypewriterTaskScroll = ({\n    taskText\n  }) => {\n    _s();\n    const [displayedText, setDisplayedText] = useState('');\n    const [currentIndex, setCurrentIndex] = useState(0);\n    useEffect(() => {\n      if (currentIndex < taskText.length) {\n        const timeoutId = setTimeout(() => {\n          setDisplayedText(prevText => prevText + taskText[currentIndex]);\n          setCurrentIndex(prevIndex => prevIndex + 1);\n        }, 50);\n        return () => clearTimeout(timeoutId);\n        setAnimationComplete(true);\n      }\n    }, [currentIndex, taskText]);\n    return /*#__PURE__*/_jsxDEV(TaskScroll, {\n      taskText: displayedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 16\n    }, this);\n  };\n  _s(TypewriterTaskScroll, \"4p+UW4yKA08vspvaIMFg+MJxO3w=\");\n  const handleLevelClick = level => {\n    setShowGame(false);\n    setCurrentLevel(level);\n    setCurrentTaskIndex(0);\n    setSolvedTasks(prevSolvedTasks => {\n      const updatedSolvedTasks = [...prevSolvedTasks];\n      updatedSolvedTasks[level] = [];\n      return updatedSolvedTasks;\n    });\n    setTimeout(() => {\n      setShowGame(true);\n    }, 1800);\n    const body = document.querySelector('body');\n    body.style.backgroundImage = `url(${levelBackgrounds[level]})`;\n    setBackgroundImage(`url(${levelBackgrounds[level]})`);\n  };\n  const handleSubmit = () => {\n    const currentTask = tasks[currentLevel][currentTaskIndex];\n    if (currentTask.type === 'input') {\n      if (!solvedTasks[currentLevel].includes(currentTaskIndex)) {\n        if (solution.trim() === currentTask.correctAnswer) {\n          setScore(prevScore => prevScore + 10 + levelAsNumber);\n          setMessage(\"Richtig! Du hast 10 Punkte für diese Antwort bekommen.\");\n          setSolvedTasks(prevSolvedTasks => {\n            const updatedSolvedTasks = [...prevSolvedTasks];\n            updatedSolvedTasks[currentLevel] = [...updatedSolvedTasks[currentLevel], currentTaskIndex];\n            return updatedSolvedTasks;\n          });\n          setCurrentTaskIndex(prevIndex => {\n            if (prevIndex < tasks[currentLevel].length - 1) {\n              return prevIndex + 1;\n            } else {\n              setCurrentLevel(prevLevel => prevLevel + 1);\n              return 0;\n            }\n          });\n        } else {\n          setMessage(\"Leider falsch! Schaue dir noch einmal die Erklärungen an.\");\n          setScore(prevScore => prevScore >= 5 ? prevScore - 1 : 0);\n        }\n      } else {\n        setMessage(\"Du hast diese Aufgabe bereits gelöst.\");\n      }\n    }\n    setSolution(\"\");\n  };\n  const handleOptionClick = selectedOption => {\n    const optionElement = document.getElementById(selectedOption);\n    if (optionElement) {\n      optionElement.classList.add(\"glowing\");\n      if (!solvedTasks[currentLevel].includes(currentTaskIndex)) {\n        setTimeout(() => {\n          optionElement.classList.remove(\"glowing\");\n          if (selectedOption === tasks[currentLevel][currentTaskIndex].correctAnswer) {\n            setScore(prevScore => prevScore + 10 + levelAsNumber);\n            setMessage(\"Richtig! Du hast 10 Punkte für diese Antwort bekommen.\");\n            setCurrentTaskIndex(prevIndex => prevIndex + 1);\n            setSolvedTasks(prevSolvedTasks => {\n              const updatedSolvedTasks = [...prevSolvedTasks];\n              updatedSolvedTasks[currentLevel] = [...updatedSolvedTasks[currentLevel], currentTaskIndex];\n              return updatedSolvedTasks;\n            });\n            if (currentTaskIndex + 1 === tasks[currentLevel].length) {\n              setCurrentLevel(prevLevel => prevLevel === \"0\" ? \"1\" : prevLevel + 1);\n              setCurrentTaskIndex(0);\n            }\n          } else {\n            setMessage(\"Leider falsch! Schaue dir noch einmal die Erklärungen an.\");\n            setScore(prevScore => prevScore >= 5 ? prevScore - levelAsNumber - 3 : 0);\n          }\n          setSolution(\"\");\n        }, 2500);\n      } else {\n        optionElement.classList.remove(\"glowing\");\n        setMessage(\"Du hast diese Aufgabe bereits gelöst.\");\n      }\n    }\n  };\n  return showGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"level-bar\",\n      children: Array.from({\n        length: 10\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `level-indicator ${index === currentLevel ? 'current-level' : ''}`,\n        onClick: () => handleLevelClick(index),\n        children: index + 1\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"button\",\n        onClick: openModal,\n        children: \"ASCII Erkl\\xE4rung\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: modalIsOpen,\n        onRequestClose: closeModal,\n        contentLabel: \"PDF Viewer\",\n        style: {\n          content: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ModalButton\",\n          onClick: closeModal,\n          children: \"Erkl\\xE4rung Schlie\\xDFen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ASCIIExpl, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: handleButtonClick,\n        children: \"Unicode Erkl\\xE4rung\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-progress\",\n        children: Array.from({\n          length: tasks[currentLevel].length\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `task-indicator ${index === currentTaskIndex ? 'current-task' : ''}`,\n          onClick: () => handleTaskClick(index),\n          children: index + 1\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `score-container ${scoreAnimation ? 'score-animation' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"score-text\",\n          children: \"Punktestand:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"score-value\",\n          children: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-text\",\n        children: [/*#__PURE__*/_jsxDEV(TaskScroll, {\n          taskText: tasks[currentLevel][currentTaskIndex].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }, this), tasks[currentLevel][currentTaskIndex].type === 'multipleChoice' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: Object.entries(tasks[currentLevel][currentTaskIndex].options).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            id: key,\n            className: \"option\",\n            onClick: () => handleOptionClick(key),\n            children: `${key}) ${value}`\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }, this), tasks[currentLevel][currentTaskIndex].type === 'input' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"input-field\",\n          value: solution,\n          onChange: e => setSolution(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"buttonSubmit\",\n          onClick: handleSubmit,\n          children: \"Antwort best\\xE4tigen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 15\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-game\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-game-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => setMessage(\"\"),\n            children: \"Schlie\\xDFen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this) : null;\n}\n_s2(GameScreen, \"AnzH1/wxWYIDLlbnxflQ/ivGOG4=\");\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["React","useState","useEffect","ASCIIExpl","UnicodeExpl","TaskScroll","tasks","Modal","MyPdfViewer","jsxDEV","_jsxDEV","GameScreen","_s2","_s","$RefreshSig$","levelBackgrounds","require","currentLevel","setCurrentLevel","solution","setSolution","showAsciiPopup","setShowAsciiPopup","showUnicodePopup","setShowUnicodePopup","score","setScore","message","setMessage","scoreAnimation","setScoreAnimation","backgroundImage","setBackgroundImage","currentTaskIndex","setCurrentTaskIndex","solvedTasks","setSolvedTasks","Array","from","length","showGame","setShowGame","animationComplete","setAnimationComplete","showMyPdfViewer","setShowMyPdfViewer","modalIsOpen","setModalIsOpen","levelAsNumber","parseInt","handleTaskClick","index","initializeBackgroundImage","initialBackgroundImage","document","body","style","backgroundSize","backgroundRepeat","backgroundPosition","handleButtonClick","setTimeout","timeoutID","clearTimeout","openModal","closeModal","TypewriterTaskScroll","taskText","displayedText","setDisplayedText","currentIndex","setCurrentIndex","timeoutId","prevText","prevIndex","fileName","_jsxFileName","lineNumber","columnNumber","handleLevelClick","level","prevSolvedTasks","updatedSolvedTasks","querySelector","handleSubmit","currentTask","type","includes","trim","correctAnswer","prevScore","prevLevel","handleOptionClick","selectedOption","optionElement","getElementById","classList","add","remove","className","children","_","onClick","isOpen","onRequestClose","contentLabel","content","display","flexDirection","alignItems","justifyContent","question","Object","entries","options","map","key","value","id","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/igorshkolnik/Desktop/tool/src/GameScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './GameScreen.css';\nimport ASCIIExpl from './ASCIIExplain';\nimport UnicodeExpl from './UnicodeExplain';\nimport TaskScroll from './TaskScroll';\nimport tasks from './Tasks'; \nimport Modal from 'react-modal';\nimport MyPdfViewer from './MyPdfViewer';\n\n\n\nfunction GameScreen() {\n\n  const levelBackgrounds = {\n    0: require('./pictures/tempel.jpeg'),\n    1: require('./pictures/tempel1.jpeg'),\n    2: require('./pictures/tempel2.jpeg'),\n    3: require('./pictures/tempel3.jpeg'),\n    4: require('./pictures/tempel4.jpeg'),\n    5: require('./pictures/tempel5.jpeg'),\n    6: require('./pictures/tempel6.jpeg'),\n    7: require('./pictures/tempel7.jpeg'),\n    8: require('./pictures/tempel8.jpeg'),\n    9: require('./pictures/tempel9.jpeg'),\n    10: require('./pictures/tempel10.jpeg'),\n  };\n\n    const [currentLevel, setCurrentLevel] = useState(\"0\");\n    const [solution, setSolution] = useState(\"\");\n    const [showAsciiPopup, setShowAsciiPopup] = useState(false);\n    const [showUnicodePopup, setShowUnicodePopup] = useState(false);\n    const [score, setScore] = useState(0);\n    const [message, setMessage] = useState(\"\");\n    const [scoreAnimation, setScoreAnimation] = useState(false);\n    const [backgroundImage, setBackgroundImage] = useState(\"\");\n    const [currentTaskIndex, setCurrentTaskIndex] = useState(0);\n    const [solvedTasks, setSolvedTasks] = useState(Array.from({ length: 10 }, () => []));\n    const [showGame, setShowGame] = useState(false);\n    const [animationComplete, setAnimationComplete] = useState(false);\n    const [showMyPdfViewer, setShowMyPdfViewer] = useState(false);\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n\n    \n    const levelAsNumber = parseInt(currentLevel, 10);\n\n    const handleTaskClick = (index) => {\n      setCurrentTaskIndex(index);\n    };\n\n    const initializeBackgroundImage = () => {\n      const initialBackgroundImage = levelBackgrounds[currentLevel];\n      document.body.style.backgroundImage = `url(${initialBackgroundImage})`;\n      document.body.style.backgroundSize = '100% 100%';\n      document.body.style.backgroundRepeat = 'no-repeat';\n      document.body.style.backgroundPosition = 'center center';\n    };\n  \n    useEffect(() => {\n      initializeBackgroundImage(); \n    }, []);\n\n\n    const handleButtonClick = () => {\n      setShowMyPdfViewer(true);\n    }\n\n      useEffect(() => {\n        if (score !== 0) {\n          setScoreAnimation(true);\n          setTimeout(() => {\n            setScoreAnimation(false);\n          }, 1000); \n        }\n      }, [score]);\n\n      useEffect(() => {\n        const timeoutID = setTimeout(() => {\n          setShowGame(true);\n        }, 1000);\n        return () => clearTimeout(timeoutID);\n      }, []);\n\n      const openModal = () => {\n        setModalIsOpen(true);\n      }\n    \n      const closeModal = () => {\n        setModalIsOpen(false);\n      }\n\n\n      const TypewriterTaskScroll = ({ taskText }) => {\n        const [displayedText, setDisplayedText] = useState('');\n        const [currentIndex, setCurrentIndex] = useState(0);\n      \n        useEffect(() => {\n          if (currentIndex < taskText.length) {\n            const timeoutId = setTimeout(() => {\n              setDisplayedText((prevText) => prevText + taskText[currentIndex]);\n              setCurrentIndex((prevIndex) => prevIndex + 1);\n            }, 50);\n      \n            return () => clearTimeout(timeoutId);\n            setAnimationComplete(true);\n          }\n        }, [currentIndex, taskText]);\n      \n        return <TaskScroll taskText={displayedText} />;\n      };\n\n      const handleLevelClick = (level) => {\n      setShowGame(false);\n      setCurrentLevel(level);\n      setCurrentTaskIndex(0);\n      setSolvedTasks((prevSolvedTasks) => {\n        const updatedSolvedTasks = [...prevSolvedTasks];\n        updatedSolvedTasks[level] = [];\n        return updatedSolvedTasks;\n      });\n      setTimeout(() => {\n        setShowGame(true);\n      }, 1800);\n      const body = document.querySelector('body');\n      body.style.backgroundImage = `url(${levelBackgrounds[level]})`;\n      setBackgroundImage(`url(${levelBackgrounds[level]})`);\n      };\n\n\n    const handleSubmit = () => {\n      const currentTask = tasks[currentLevel][currentTaskIndex];\n      if (currentTask.type === 'input') {\n        if (!solvedTasks[currentLevel].includes(currentTaskIndex)) {\n          if (solution.trim() === currentTask.correctAnswer) {\n            setScore((prevScore) => prevScore + 10 + levelAsNumber);\n            setMessage(\"Richtig! Du hast 10 Punkte für diese Antwort bekommen.\");\n            setSolvedTasks((prevSolvedTasks) => {\n              const updatedSolvedTasks = [...prevSolvedTasks];\n              updatedSolvedTasks[currentLevel] = [...updatedSolvedTasks[currentLevel], currentTaskIndex];\n              return updatedSolvedTasks;\n            });\n    \n            setCurrentTaskIndex((prevIndex) => {\n              if (prevIndex < tasks[currentLevel].length - 1) {\n                return prevIndex + 1;\n              } else {\n                setCurrentLevel((prevLevel) => prevLevel + 1);\n                return 0; \n              }\n            });\n          } else {\n            setMessage(\"Leider falsch! Schaue dir noch einmal die Erklärungen an.\");\n            setScore((prevScore) => (prevScore >= 5 ? prevScore - 1 : 0));\n          }\n        } else {\n          setMessage(\"Du hast diese Aufgabe bereits gelöst.\");\n        }\n      }\n      setSolution(\"\");\n    };\n    \n    \n    \n\n    const handleOptionClick = (selectedOption) => {\n      const optionElement = document.getElementById(selectedOption);\n    \n      if (optionElement) {\n        optionElement.classList.add(\"glowing\");\n        if (!solvedTasks[currentLevel].includes(currentTaskIndex)) {\n        setTimeout(() => {\n          optionElement.classList.remove(\"glowing\");\n          if (selectedOption === tasks[currentLevel][currentTaskIndex].correctAnswer) {\n            setScore((prevScore) => prevScore + 10 + levelAsNumber);\n            setMessage(\"Richtig! Du hast 10 Punkte für diese Antwort bekommen.\");\n            setCurrentTaskIndex((prevIndex) => prevIndex + 1);\n            setSolvedTasks((prevSolvedTasks) => {\n              const updatedSolvedTasks = [...prevSolvedTasks];\n              updatedSolvedTasks[currentLevel] = [...updatedSolvedTasks[currentLevel], currentTaskIndex];\n              return updatedSolvedTasks;\n            });\n    \n            if (currentTaskIndex + 1 === tasks[currentLevel].length) {\n              setCurrentLevel((prevLevel) => (prevLevel === \"0\" ? \"1\" : prevLevel +1));\n              setCurrentTaskIndex(0);\n            }\n          } else {\n            setMessage(\"Leider falsch! Schaue dir noch einmal die Erklärungen an.\");\n            setScore((prevScore) => (prevScore >= 5 ? prevScore - levelAsNumber - 3 : 0));\n          }\n    \n          setSolution(\"\");\n        }, 2500);\n      }\n      else {\n        optionElement.classList.remove(\"glowing\");\n        setMessage(\"Du hast diese Aufgabe bereits gelöst.\");\n      }\n    }\n    };\n\n      return showGame ? (\n        <div className=\"game-container\">\n  <div className=\"level-bar\">\n    {Array.from({ length: 10 }, (_, index) => (\n      <div\n        key={index}\n        className={`level-indicator ${index === currentLevel ? 'current-level' : ''}`}\n        onClick={() => handleLevelClick(index)}\n      >\n        {index + 1}\n      </div>\n    ))}\n  </div>\n  <div className=\"button-container\">\n            <button  type=\"button\" className=\"button\" onClick={openModal}>\n              ASCII Erklärung\n            </button>\n            <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"PDF Viewer\"\n        style={{\n          content: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n          },\n        }}\n      >\n        <button className=\"ModalButton\" onClick={closeModal}>Erklärung Schließen</button>\n        <ASCIIExpl/>\n      </Modal>\n            <button className=\"button\" onClick={handleButtonClick}>\n              Unicode Erklärung\n            </button>\n          </div>\n  <div className=\"task-container\">\n    <div className=\"task-progress\">\n      {Array.from({ length: tasks[currentLevel].length }, (_, index) => (\n        <div\n          key={index}\n          className={`task-indicator ${index === currentTaskIndex ? 'current-task' : ''}`}\n          onClick={() => handleTaskClick(index)}\n        >\n          {index + 1}\n        </div>\n      ))}\n      </div>\n       <div className={`score-container ${scoreAnimation ? 'score-animation' : ''}`}>\n              <span className=\"score-text\" >Punktestand:</span>\n              <span className=\"score-value\">{score}</span>\n       </div>\n       </div>\n          <div className=\"task-container\">\n            <div className=\"task-text\">\n              <TaskScroll taskText={tasks[currentLevel][currentTaskIndex].question} />\n              {tasks[currentLevel][currentTaskIndex].type === 'multipleChoice' && (\n                <div className=\"options-container\">\n                  {Object.entries(tasks[currentLevel][currentTaskIndex].options).map(([key, value]) => (\n                    <div key={key} id={key} className=\"option\" onClick={() => handleOptionClick(key)}>\n                      {`${key}) ${value}`}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            {tasks[currentLevel][currentTaskIndex].type === 'input' && (\n              <div>\n                <input\n                  type=\"text\"\n                  className=\"input-field\"\n                  value={solution}\n                  onChange={(e) => setSolution(e.target.value)}\n                />\n                <button className=\"buttonSubmit\" onClick={handleSubmit}>\n                Antwort bestätigen\n                </button>\n              </div>\n            )}\n            {message && (\n              <div className=\"popup-game\">\n                <div className=\"popup-game-content\">\n                  <h2>{message}</h2>\n                  <button className=\"button\" onClick={() => setMessage(\"\")}>Schließen</button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      ) : null;\n          }      \nexport default GameScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}